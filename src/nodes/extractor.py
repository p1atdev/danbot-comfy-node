from ..models.utils import ModelWrapper
from .type import (
    DANBOT_MODEL_TYPE,
    FORMAT_KWARGS_DTYPE,
)


class TranslationExtractorNode:
    @classmethod
    def INPUT_TYPES(s):
        return {
            "required": {
                "danbot_model": (DANBOT_MODEL_TYPE,),
                "generated_tags": (
                    "STRING",
                    {
                        "forceInput": True,
                        "tooltip": "The tags generated by the model.",
                    },
                ),
            },
        }

    RETURN_TYPES = (FORMAT_KWARGS_DTYPE,)
    RETURN_NAMES = ("translation_kwargs",)
    OUTPUT_TOOLIPS = ("The extracted translation tags as a dict",)

    FUNCTION = "extract"

    def extract(
        self,
        danbot_model: ModelWrapper,
        generated_tags: str,
    ):
        translation = danbot_model.extract_translation_result(generated_tags)

        return (translation,)


class ExtensionExtractorNode:
    @classmethod
    def INPUT_TYPES(s):
        return {
            "required": {
                "danbot_model": (DANBOT_MODEL_TYPE,),
                "generated_tags": (
                    "STRING",
                    {
                        "forceInput": True,
                        "tooltip": "The tags generated by the model.",
                    },
                ),
            },
        }

    RETURN_TYPES = (FORMAT_KWARGS_DTYPE,)
    RETURN_NAMES = ("extension_kwargs",)
    OUTPUT_TOOLIPS = ("The extracted extension tags as a dict",)

    FUNCTION = "extract"

    def extract(
        self,
        danbot_model: ModelWrapper,
        generated_tags: str,
    ):
        extension = danbot_model.extract_extension_result(generated_tags)

        return (extension,)
